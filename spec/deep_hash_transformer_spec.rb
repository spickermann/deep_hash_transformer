# frozen_string_literal: true

RSpec.describe DeepHashTransformer do
  subject(:transformer) { described_class.new(example) }

  let(:example) { { foo: 'bar' } }

  describe 'autogenerated methods' do
    DeepHashTransformer::TRANSFORMATIONS.each do |method|
      describe ".#{method}" do
        it "delegates to `KeyTransformer.#{method}`" do
          expect(
            DeepHashTransformer::KeyTransformer
          ).to receive(method).with(:foo).once # rubocop:disable RSpec/MessageSpies

          transformer.public_send(method)
        end
      end
    end
  end

  describe '#tr' do
    context 'with `:snake_case, :symbolize`' do
      subject { super().tr(:snake_case, :symbolize) }

      let(:example) { { 'FooBar' => 'baz' } }

      it { is_expected.to eq(foo_bar: 'baz') }
    end

    context 'with an unknown transformation' do
      subject(:unknown_transformer) { transformer.tr(:unknown) }

      it 'raise an exception' do
        expect { unknown_transformer }.to raise_error(ArgumentError, /unknown/)
      end
    end

    context 'with a complex, nested example' do
      subject { super().tr(:camel_case, :symbolize) }

      let(:example) do
        {
          Integer => 123,
          :symbol => { foo_bar: 'bar' },
          'string' => { 'foo_bar' => 123 },
          'nested-array' => [
            {
              'camelCased' => 'camelCased',
              'dashed-key' => 'dashed-key',
              'PascalCased' => 'PascalCased',
              'under_scored' => 'under_scored'
            }
          ]
        }
      end

      it do # rubocop:disable RSpec/ExampleLength
        is_expected.to eq( # rubocop:disable RSpec/ImplicitSubject
          Integer => 123,
          :symbol => { fooBar: 'bar' },
          :string => { fooBar: 123 },
          :nestedArray => [
            {
              camelCased: 'camelCased',
              dashedKey: 'dashed-key',
              pascalCased: 'PascalCased',
              underScored: 'under_scored'
            }
          ]
        )
      end
    end
  end

  it 'has a version number' do
    expect(DeepHashTransformer::VERSION).not_to be_nil
  end
end
